# Access to time and date for automation triggers 
  - platform: time_date
    display_options:
      - 'time'
      - 'date'
      - 'date_time'
      - 'time_date'
# Current HA version
  - platform: version
    name: current_version
# Make sensors out of input selects for presence status
  - platform: template
    sensors:
      pieter_presence:
        value_template: '{{ states.input_select.pieter_presence_status.state }}'
        friendly_name: 'Pieter'
      sarah_presence:
        value_template: '{{ states.input_select.sarah_presence_status.state }}'
        friendly_name: 'Sarah'
      leo_presence:
        value_template: '{{ states.input_select.leo_presence_status.state }}'
        friendly_name: 'Leopold'
      suki_presence:
        value_template: '{{ states.input_select.suki_presence_status.state }}'
        friendly_name: 'Suki'
# OpenWeatherMap entity into sensors
      owm_temperature:
        friendly_name: "Outside Temperature"
        unit_of_measurement: '°C'
        value_template: "{{ state_attr('weather.openweathermap', 'temperature') }}"
      owm_humidity:
        friendly_name: "Outside Humidity"
        unit_of_measurement: '%'
        value_template: "{{ state_attr('weather.openweathermap', 'humidity') }}"
      owm_wind_speed:
        friendly_name: "Wind Speed"
        unit_of_measurement: 'km/h'
        value_template: "{{ state_attr('weather.openweathermap', 'wind_speed') }}"
# Input datetime as a sensor
      front_door_last_opened:
        friendly_name: "Front door last opened at"
        value_template: "{{ states('input_datetime.front_door_last_opened')}}"
      back_door_last_opened:
        friendly_name: "Back door last opened at"
        value_template: "{{ states('input_datetime.back_door_last_opened')}}"
# Make sun into "nighttime" sensor for plots
# --> replaced by sun elevation sensor
      nighttime:
        value_template: '{% if is_state("sun.sun", "above_horizon") -%}0{%- else -%}1{%- endif %}'
        friendly_name: 'Nighttime'
# Sun elevation as a sensor
      solar_elevation:
        friendly_name: "Solar Elevation"
        unit_of_measurement: '°'
        value_template: "{{ state_attr('sun.sun', 'elevation') }}"
# Washer sensors: one for power and one for running/not-running
      washer_power:
        friendly_name: 'Washer Power Usage'
        unit_of_measurement: 'W'
        value_template: '{{ state_attr("switch.washer", "current_power_w") }}'
      dryer_power:
        friendly_name: 'Dryer Power Usage'
        unit_of_measurement: 'W'
        value_template: '{{ state_attr("switch.dryer", "current_power_w") }}'
      washer_status:
        friendly_name: 'Washer Status'
        value_template: "{% if states('sensor.washer_power')|float > 2 %}on{% else %}off{% endif %}"
      dryer_status:
        friendly_name: 'Dryer Status'
        value_template: "{% if states('sensor.dryer_power')|float > 2 %}on{% else %}off{% endif %}"
# MQTT sensors
  - platform: mqtt
    unique_id: catfeeder_lastfeed
    name: "Catfeeder last feed"
    icon: mdi:speedometer
    state_topic: "home/catfeeder/lastfeed" #unsigned long that represents epoch time
    # availability_topic: "home/catfeeder/lwt"
    value_template: "{{ value  | int | timestamp_utc }}"
  - platform: mqtt
    unique_id: catfeeder_remaining
    name: "Catfeeder food remaining"
    icon: mdi:speedometer
    state_topic: "home/catfeeder/remaining"
    # availability_topic: "home/catfeeder/lwt"
    value_template: "{{ value  | int  }}"
